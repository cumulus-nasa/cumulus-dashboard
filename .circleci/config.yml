version: 2
jobs:
  build:
    machine: true
    working_directory: ~/cumulus-dashboard
    steps:
      - checkout

      # restore cache
      - restore_cache:
          keys:
            - dashboard-{{ .Branch }}-{{ checksum "package.json" }}

      - run:
          name: Install dependencies
          command: |
            docker run --rm \
              -v /home/circleci/.cache:/root/.cache \
              -v $(pwd):/home \
              --workdir /home \
              node:8.11.4 \
              yarn install --frozen-lockfile --cache-folder /root/.cache

      # save node_module folders
      - save_cache:
          key: dashboard-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - ~/cumulus-dashboard/node_modules
            - ~/.cache

      # image node:8.11.4 has yarn version 1.6.0 and yarn >=1.12.3 is needed for audit
      - run:
          name: Run audit-ci
          command: |
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install v8.11.4
            nvm alias default v8.11.4
            npm install -g yarn
            yarn run audit-ci

      - run:
          name: Test dashboard build
          command: |
            # build dashboard
            docker run --rm \
              -v /home/circleci/.cache:/root/.cache \
              -v $(pwd):/home \
              --workdir /home \
              -e APIROOT=http://api:5001 \
              node:8.11.4 \
              yarn run build

      - run:
          name: Run tests
          command: |
            docker run --rm \
              -v /home/circleci/.cache:/root/.cache \
              -v $(pwd):/home \
              --workdir /home \
              node:8.11.4 \
              yarn test --cache-folder /root/.cache

      - run:
          name: Prepare servers
          command: |
            # run fake api
            docker run -d \
              --rm \
              --name api \
              -v $(pwd):/home \
              --workdir /home \
              -p 5001:5001 \
              node:8.11.4 \
              node fake-api.js

            # run dashboard
            docker run -d \
              --rm \
              --name dashboard \
              -v $(pwd):/home \
              --workdir /home \
              -e APIROOT=http://api:5001 \
              -p 3000:3000 \
              node:8.11.4 \
              yarn serve

            attempt_counter=0
            max_attempts=20

            until $(curl --output /dev/null --silent --head --fail http://localhost:3000); do
              if [ ${attempt_counter} -eq ${max_attempts} ];then
                echo "Max attempts reached"
                exit 1
              fi

              printf '.'
              attempt_counter=$(($attempt_counter+1))
              sleep 5
            done

      - run:
          name: Run Validation Tests
          command: |
            docker run \
              --link api:api \
              --link dashboard:dashboard \
              -e CYPRESS_BASE_URL=http://dashboard:3000 \
              --rm \
              -v /home/circleci/.cache:/root/.cache \
              -v $(pwd):/home \
              --workdir /home \
              node:8.11.4 \
              yarn validation

      - run:
          name: Run Integration Tests
          command: |
            docker run \
              --link api:api \
              --link dashboard:dashboard \
              -e CYPRESS_BASE_URL=http://dashboard:3000 \
              -e CYPRESS_APIROOT=http://api:5001 \
              --rm \
              -v /home/circleci/.cache:/root/.cache \
              -v $(pwd):/home \
              --workdir /home \
              cypress/base:8 \
              yarn cypress-ci

  deploy:
    machine: true
    working_directory: ~/cumulus-dashboard
    steps:
      - checkout

      # restore cache
      - restore_cache:
          keys:
            - dashboard-{{ .Branch }}-{{ checksum "package.json" }}

      - run:
          name: Install awscli
          command: sudo pip install awscli


      - run:
          name: Install dependencies
          command: |
            docker run --rm \
              -v /home/circleci/.cache:/root/.cache \
              -v $(pwd):/home \
              --workdir /home \
              node:8.11.4 \
              yarn install --frozen-lockfile --cache-folder /root/.cache

      - run:
          # This has to be done in a separate step, like this, because Circle CI
          # will not interpolate values when setting environment variables
          name: Setup Sandbox Environment Variables
          command: |
            echo 'export AWS_ACCESS_KEY_ID="$SANDBOX_ACCESS_KEY_ID"' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY="$SANDBOX_SECRET_ACCESS_KEY"' >> $BASH_ENV

      - run:
          name: Build Sandbox Dist
          command: |
            docker run --rm \
              -v /home/circleci/.cache:/root/.cache \
              -v $(pwd):/home \
              --workdir /home \
              -e APIROOT=${SANDBOX_API} \
              node:8.11.4 \
              yarn run build

      - run:
          name: Deploy to S3
          command: |
            aws s3 sync $(pwd)/dist s3://${SANDBOX_DASHBOARD_BUCKET}

      - run:
          # This has to be done in a separate step, like this, because Circle CI
          # will not interpolate values when setting environment variables
          name: Setup Sandbox Environment Variables
          command: |
            echo 'export AWS_ACCESS_KEY_ID="$SANDBOX_ACCESS_KEY_ID"' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY="$SANDBOX_SECRET_ACCESS_KEY"' >> $BASH_ENV

      - run:
          name: Build Sandbox Dist
          command: |
            docker run --rm \
              -v /home/circleci/.cache:/root/.cache \
              -v $(pwd):/home \
              --workdir /home \
              -e APIROOT=${SANDBOX_API_ROOT} \
              node:8.11.4 \
              yarn run build

      - run:
          name: Deploy to Cumulus Sandbox
          command: |
            aws s3 sync $(pwd)/dist s3://${SANDBOX_DASHBOARD_BUCKET}

      - run:
          # This has to be done in a separate step, like this, because Circle CI
          # will not interpolate values when setting environment variables
          name: Setup SIT Environment Variables
          command: |
            echo 'export AWS_ACCESS_KEY_ID="$SIT_ACCESS_KEY_ID"' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY="$SIT_SECRET_ACCESS_KEY"' >> $BASH_ENV

      - run:
          name: Build SIT Dist
          command: |
            docker run --rm \
              -v /home/circleci/.cache:/root/.cache \
              -v $(pwd):/home \
              --workdir /home \
              -e APIROOT=${SIT_API_ROOT} \
              node:8.11.4 \
              yarn run build

      - run:
          name: Deploy to Cumulus SIT
          command: |
            aws s3 sync $(pwd)/dist s3://${SIT_DASHBOARD_BUCKET}

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: develop